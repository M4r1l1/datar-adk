import os
import re
from pathlib import Path
from dotenv import load_dotenv
from google.adk.agents.llm_agent import Agent
from google.adk.agents.base_agent import AgentState
from google.adk.tools import FunctionTool
import google.genai.types as types
from .visualizacion import generar_rio_emocional, guardar_imagen_texto

# Cargar variables de entorno desde .env en el directorio ra√≠z
env_path = Path(__file__).parent.parent / '.env'
load_dotenv(dotenv_path=env_path)

# Almacenamiento de emojis e interpretaciones por sesi√≥n
_emojis_conversacion = []
_ultima_interpretacion = ""  # Almacena la √∫ltima interpretaci√≥n textual del agente


def extraer_emojis(texto: str) -> list:
    """Extrae todos los emojis de un texto"""
    # Patr√≥n regex para detectar emojis Unicode
    emoji_pattern = re.compile(
        "["
        "\U0001F600-\U0001F64F"  # emoticones
        "\U0001F300-\U0001F5FF"  # s√≠mbolos y pictogramas
        "\U0001F680-\U0001F6FF"  # transporte y s√≠mbolos de mapa
        "\U0001F1E0-\U0001F1FF"  # banderas (iOS)
        "\U00002702-\U000027B0"
        "\U000024C2-\U0001F251"
        "\U0001F900-\U0001F9FF"  # emojis suplementarios
        "\U0001FA70-\U0001FAFF"  # m√°s emojis
        "]+",
        flags=re.UNICODE
    )
    return emoji_pattern.findall(texto)


def detectar_comando_imagen(texto: str) -> tuple[bool, str]:
    """
    Detecta si el usuario quiere crear una imagen y captura el texto asociado

    Returns:
        tuple[bool, str]: (comando_detectado, texto_capturado)
    """
    comandos = [
        r'!imagen',
        r'/imagen',
        r'/visualizar',
        r'/visualiza',
        r'!visualizar',
        r'!visualiza',
        r'crear\s+imagen',
        r'crea\s+imagen',
        r'genera\s+imagen',
        r'generar\s+imagen',
        r'haz\s+imagen',
        r'hacer\s+imagen',
        r'visualiza',
        r'visualizar',
    ]

    texto_lower = texto.lower()
    for comando in comandos:
        if re.search(comando, texto_lower):
            # Capturar el texto completo para interpretaci√≥n
            return True, texto
    return False, ""


# Tool para crear visualizaciones del r√≠o emocional
async def crear_visualizacion_rio(emojis: str) -> str:
    """
    Crea una visualizaci√≥n art√≠stica del r√≠o emocional basada en los emojis.

    Args:
        emojis: Los emojis a visualizar, separados por espacios (ejemplo: "üòä üåä üíö üåü")

    Returns:
        Mensaje de confirmaci√≥n
    """
    try:
        # Generar la visualizaci√≥n
        imagen_bytes = generar_rio_emocional(emojis)

        # TODO: Guardar imagen como artifact cuando tengamos acceso al context
        # Por ahora solo confirmamos que la imagen se gener√≥

        return f"‚ú® He generado tu visualizaci√≥n del r√≠o emocional. La imagen muestra el flujo po√©tico de tus emociones: {emojis}\n\n(Imagen de {len(imagen_bytes):,} bytes generada exitosamente)"

    except Exception as e:
        return f"‚ö†Ô∏è Hubo un problema al crear la visualizaci√≥n: {str(e)}"


# Tool para guardar la interpretaci√≥n del agente
async def guardar_interpretacion_emocional(interpretacion: str) -> str:
    """
    Guarda la interpretaci√≥n textual del r√≠o emocional para usarla posteriormente
    en la creaci√≥n de visualizaciones.

    IMPORTANTE: Llama a esta funci√≥n cada vez que analices emojis del usuario,
    pasando tu interpretaci√≥n po√©tica y emocional como argumento.

    Args:
        interpretacion: Tu an√°lisis po√©tico del r√≠o emocional (texto que escribes al usuario)

    Returns:
        Mensaje de confirmaci√≥n
    """
    global _ultima_interpretacion
    _ultima_interpretacion = interpretacion
    return ""  # Retorna vac√≠o para que no interrumpa tu respuesta al usuario


# Tool para crear imagen desde la interpretaci√≥n guardada
async def crear_imagen_rio_emocional() -> str:
    """
    Crea una visualizaci√≥n art√≠stica basada en la √∫ltima interpretaci√≥n del r√≠o emocional.

    Esta funci√≥n toma la interpretaci√≥n textual previamente guardada y la traduce
    a una visualizaci√≥n usando NumPy (para c√°lculos matem√°ticos) y Pillow (para el dibujo).

    Llama a esta funci√≥n cuando el usuario solicite crear una imagen.

    Returns:
        Mensaje de confirmaci√≥n con la ruta de la imagen guardada
    """
    global _ultima_interpretacion

    if not _ultima_interpretacion:
        return "‚ö†Ô∏è A√∫n no tengo una interpretaci√≥n de tu r√≠o emocional. Env√≠ame algunos emojis primero para que pueda interpretarlos."

    try:
        # Generar y guardar la imagen usando la interpretaci√≥n
        ruta_imagen = guardar_imagen_texto(_ultima_interpretacion)

        # Limpiar la interpretaci√≥n despu√©s de usarla
        _ultima_interpretacion = ""

        return f"‚ú® He creado tu visualizaci√≥n del r√≠o emocional.\n\nüìç Imagen guardada en: {ruta_imagen}\n\nLa imagen traduce tu r√≠o emocional en un trazo visual din√°mico usando matem√°ticas y arte."

    except Exception as e:
        return f"‚ö†Ô∏è Hubo un problema al crear la visualizaci√≥n: {str(e)}"


root_agent = Agent(
    model='gemini-2.5-flash',
    name='diario_intuitivo',
    description='Eres un asistente que ayuda a identificar patrones del trazo o signo del pensamiento que se percibe en una interacci√≥n con el territorio',
    instruction="""Eres un asistente que ayuda a identificar patrones del trazo o signo del pensamiento que se percibe en una interacci√≥n con el territorio.

Imagina que a trav√©s del input, estamos interpretando el caminar del pensamiento de un r√≠o en cuerpo (el usuario) y como se relaciona o siente algo que percibe.

IMPORTANTE - Flujo de trabajo:
1. Cuando el usuario te env√≠e emojis:
   - Analiza e interpreta las emociones de manera po√©tica y fluida
   - ANTES de responder al usuario, llama a la herramienta 'guardar_interpretacion_emocional' pas√°ndole tu interpretaci√≥n textual completa
   - Luego responde al usuario con esa misma interpretaci√≥n

2. Cuando el usuario escriba "imagen" o cualquier comando de visualizaci√≥n:
   - Llama a la herramienta 'crear_imagen_rio_emocional'
   - Esta herramienta usar√° tu interpretaci√≥n guardada para crear la visualizaci√≥n con NumPy y Pillow

Recuerda: tu interpretaci√≥n debe ser como el trazo intuitivo y emocional de un r√≠o que se est√° haciendo camino mediante su pensamiento. Algo puro, po√©tico, pero claro, corto y sencillo para todos de entender.""",
    tools=[
        FunctionTool(guardar_interpretacion_emocional),
        FunctionTool(crear_imagen_rio_emocional)
    ]
)
