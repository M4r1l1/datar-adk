import os
import re
from pathlib import Path
from dotenv import load_dotenv
from google.adk.agents.llm_agent import Agent
from google.adk.agents.base_agent import AgentState
from google.adk.tools import FunctionTool
import google.genai.types as types
from .visualizacion import generar_rio_emocional

# Cargar variables de entorno desde .env en el directorio ra√≠z
env_path = Path(__file__).parent.parent / '.env'
load_dotenv(dotenv_path=env_path)

# Lista de emojis detectados en la conversaci√≥n (almacenamiento simple)
_emojis_conversacion = []


def extraer_emojis(texto: str) -> list:
    """Extrae todos los emojis de un texto"""
    # Patr√≥n regex para detectar emojis Unicode
    emoji_pattern = re.compile(
        "["
        "\U0001F600-\U0001F64F"  # emoticones
        "\U0001F300-\U0001F5FF"  # s√≠mbolos y pictogramas
        "\U0001F680-\U0001F6FF"  # transporte y s√≠mbolos de mapa
        "\U0001F1E0-\U0001F1FF"  # banderas (iOS)
        "\U00002702-\U000027B0"
        "\U000024C2-\U0001F251"
        "\U0001F900-\U0001F9FF"  # emojis suplementarios
        "\U0001FA70-\U0001FAFF"  # m√°s emojis
        "]+",
        flags=re.UNICODE
    )
    return emoji_pattern.findall(texto)


def detectar_comando_imagen(texto: str) -> bool:
    """Detecta si el usuario quiere crear una imagen"""
    comandos = [
        r'!imagen',
        r'/imagen',
        r'/visualizar',
        r'/visualiza',
        r'!visualizar',
        r'!visualiza',
        r'crear\s+imagen',
        r'crea\s+imagen',
        r'genera\s+imagen',
        r'generar\s+imagen',
        r'haz\s+imagen',
        r'hacer\s+imagen',
        r'visualiza',
        r'visualizar',
    ]

    texto_lower = texto.lower()
    for comando in comandos:
        if re.search(comando, texto_lower):
            return True
    return False


# Tool para crear visualizaciones del r√≠o emocional
async def crear_visualizacion_rio(emojis: str) -> str:
    """
    Crea una visualizaci√≥n art√≠stica del r√≠o emocional basada en los emojis.

    Args:
        emojis: Los emojis a visualizar, separados por espacios (ejemplo: "üòä üåä üíö üåü")

    Returns:
        Mensaje de confirmaci√≥n
    """
    try:
        # Generar la visualizaci√≥n
        imagen_bytes = generar_rio_emocional(emojis)

        # TODO: Guardar imagen como artifact cuando tengamos acceso al context
        # Por ahora solo confirmamos que la imagen se gener√≥

        return f"‚ú® He generado tu visualizaci√≥n del r√≠o emocional. La imagen muestra el flujo po√©tico de tus emociones: {emojis}\n\n(Imagen de {len(imagen_bytes):,} bytes generada exitosamente)"

    except Exception as e:
        return f"‚ö†Ô∏è Hubo un problema al crear la visualizaci√≥n: {str(e)}"


root_agent = Agent(
    model='gemini-2.5-flash',
    name='diario_intuitivo',
    description='Eres un asistente que ayuda a identificar patrones del trazo o signo del pensamiento que se percibe en una interacci√≥n con el territorio',
    instruction='Eres un asistente que ayuda a identificar patrones del trazo o signo del pensamiento que se percibe en una interacci√≥n con el territorio. Imagina que a trav√©s del input, estamos interpretando el caminar del pensamiento de un r√≠o en cuerpo (el usuario) y como se relaciona o siente algo que percibe. Crea un input de entrada para ingresar un emoji y analizar que emoci√≥n interpretas cada vez que se agrega uno nuevo. Cada vez que se agregan m√°s emojis secuencialmente, dame un panorama general de tu interpretaci√≥n, entre una relaci√≥n sem√°ntica directa como indirecta. Recuerda que esta interacci√≥n es como el trazo intuitivo y emocional de un r√≠o que se est√° haciendo camino mediante su pensamiento, entonces la relaci√≥n va fluida e interpretativa fuera de lo normal. Es algo m√°s puro y p√≥etico esa interpretaci√≥n, pero no deja de ser clara, corta y sencilla para todos de entender',
    tools=[
        FunctionTool(crear_visualizacion_rio)
    ]
)
