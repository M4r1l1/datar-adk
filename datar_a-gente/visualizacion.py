"""
Herramienta para generar visualizaciones del r√≠o emocional
"""
import io
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.path import Path
import numpy as np
import google.genai.types as types


# Mapeo de emojis a colores emocionales
EMOJI_COLORES = {
    # Alegr√≠a y positividad
    'üòä': '#FFD700', 'üòÉ': '#FFA500', 'üòÑ': '#FFB347', 'ü•∞': '#FF69B4',
    'üòç': '#FF1493', 'ü§ó': '#FF6B9D', 'üòÅ': '#FFDB58', 'üåü': '#FFD700',
    '‚ú®': '#E6E6FA', 'üíñ': '#FF69B4', 'üíï': '#FFB6C1', '‚ù§Ô∏è': '#DC143C',
    'üå∏': '#FFB7C5', 'üå∫': '#FF6B9D', 'üåº': '#FFDB58',

    # Calma y serenidad
    'üòå': '#87CEEB', 'üòá': '#B0E0E6', 'üåä': '#4682B4', 'üíô': '#1E90FF',
    'üíö': '#3CB371', 'üåø': '#90EE90', 'üçÉ': '#98FB98', 'üå±': '#32CD32',
    '‚òÅÔ∏è': '#E0E0E0', 'üåô': '#F0E68C', '‚≠ê': '#FFFACD',

    # Tristeza y melancol√≠a
    'üò¢': '#4169E1', 'üò≠': '#0000CD', 'üòî': '#6495ED', 'üíî': '#8B0000',
    'üåßÔ∏è': '#778899', '‚òî': '#696969', 'üíß': '#ADD8E6',

    # Energ√≠a y pasi√≥n
    'üî•': '#FF4500', '‚ö°': '#FFFF00', 'üí•': '#FF6347', 'üåã': '#DC143C',

    # Naturaleza y crecimiento
    'üå≥': '#228B22', 'üå≤': '#006400', 'üå¥': '#00FF00', 'ü™¥': '#3CB371',

    # Misterio y profundidad
    'üåë': '#2F4F4F', 'üñ§': '#000000', 'üíú': '#8B008B', 'üîÆ': '#9370DB',

    # Neutral
    'default': '#A9A9A9'
}


def obtener_color_emoji(emoji):
    """Obtiene el color asociado a un emoji"""
    return EMOJI_COLORES.get(emoji, EMOJI_COLORES['default'])


def generar_rio_emocional(emojis_texto: str) -> bytes:
    """
    Genera una visualizaci√≥n art√≠stica del r√≠o emocional

    Args:
        emojis_texto: String con los emojis separados por espacios

    Returns:
        bytes: Imagen PNG del r√≠o emocional
    """
    # Extraer emojis individuales
    emojis = emojis_texto.split()
    if not emojis:
        emojis = ['‚ùì']

    # Configurar la figura
    fig, ax = plt.subplots(figsize=(12, 8), facecolor='#F5F5F5')
    ax.set_xlim(0, 10)
    ax.set_ylim(0, 10)
    ax.axis('off')

    # T√≠tulo po√©tico
    ax.text(5, 9.5, 'El R√≠o de tu Pensamiento',
            fontsize=24, ha='center', va='top',
            weight='bold', color='#2C3E50')

    # Generar el flujo del r√≠o
    num_emojis = len(emojis)
    x_positions = np.linspace(1, 9, num_emojis)

    # Crear una onda sinusoidal para el r√≠o
    x_river = np.linspace(0, 10, 200)
    y_base = 5

    # Dibujar el r√≠o con colores que fluyen
    for i in range(len(emojis)):
        if i < len(emojis) - 1:
            x_start = x_positions[i]
            x_end = x_positions[i + 1]

            # Seleccionar puntos del r√≠o en este segmento
            mask = (x_river >= x_start) & (x_river <= x_end)
            x_segment = x_river[mask]

            # Crear ondas suaves
            y_wave = y_base + 0.3 * np.sin(2 * np.pi * x_segment / 2)

            # Color del segmento basado en el emoji
            color = obtener_color_emoji(emojis[i])

            # Dibujar el segmento del r√≠o con degradado
            for j in range(len(x_segment) - 1):
                alpha = 0.6 + 0.4 * (j / len(x_segment))
                ax.plot(x_segment[j:j+2], y_wave[j:j+2],
                       color=color, linewidth=15, alpha=alpha,
                       solid_capstyle='round')

    # Dibujar c√≠rculos con los emojis
    for i, (emoji, x_pos) in enumerate(zip(emojis, x_positions)):
        color = obtener_color_emoji(emoji)

        # Posici√≥n en la onda
        y_pos = y_base + 0.3 * np.sin(2 * np.pi * x_pos / 2)

        # C√≠rculo de fondo
        circle = plt.Circle((x_pos, y_pos), 0.4,
                           color=color, alpha=0.7, zorder=10)
        ax.add_patch(circle)

        # Emoji en el centro
        ax.text(x_pos, y_pos, emoji,
               fontsize=32, ha='center', va='center', zorder=11)

        # Peque√±a etiqueta con n√∫mero de secuencia
        ax.text(x_pos, y_pos - 0.7, f'{i+1}',
               fontsize=12, ha='center', va='top',
               color='#555', weight='bold')

    # Agregar texto po√©tico al final
    num_total = len(emojis)
    texto_po√©tico = f'Un camino de {num_total} {"paso" if num_total == 1 else "pasos"} emocionales'
    ax.text(5, 1.5, texto_po√©tico,
           fontsize=14, ha='center', va='center',
           style='italic', color='#555')

    # Agregar l√≠nea de horizonte sutil
    ax.axhline(y=10, color='#E0E0E0', linewidth=1, linestyle='--', alpha=0.5)
    ax.axhline(y=0, color='#E0E0E0', linewidth=1, linestyle='--', alpha=0.5)

    # Guardar en bytes
    buf = io.BytesIO()
    plt.tight_layout()
    plt.savefig(buf, format='png', dpi=150, bbox_inches='tight',
                facecolor='#F5F5F5')
    plt.close(fig)

    buf.seek(0)
    return buf.read()


async def crear_visualizacion(emojis: str) -> str:
    """
    Tool del agente para crear y guardar visualizaci√≥n del r√≠o emocional

    Args:
        emojis: String con los emojis a visualizar (ej: "üòä üåä üíö üåü")

    Returns:
        str: Mensaje de confirmaci√≥n
    """
    try:
        # Generar la visualizaci√≥n
        imagen_bytes = generar_rio_emocional(emojis)

        # Crear artifact
        artifact = types.Part.from_bytes(
            data=imagen_bytes,
            mime_type="image/png"
        )

        # Guardar (esto requiere context, se configurar√° en el agente)
        return f"‚ú® He creado una visualizaci√≥n de tu r√≠o emocional con los emojis: {emojis}"

    except Exception as e:
        return f"‚ö†Ô∏è Hubo un problema al crear la visualizaci√≥n: {str(e)}"
