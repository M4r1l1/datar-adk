"""
Script de prueba para llamar directamente la herramienta de visualizaci√≥n
Este script demuestra que la funcionalidad funciona correctamente
"""
import asyncio
import sys
from pathlib import Path

# Agregar el directorio ra√≠z al path
sys.path.insert(0, str(Path(__file__).parent))

# Import directo desde el archivo
import importlib.util
spec = importlib.util.spec_from_file_location(
    "visualizacion",
    Path(__file__).parent / "datar_a-gente" / "visualizacion.py"
)
visualizacion = importlib.util.module_from_spec(spec)
spec.loader.exec_module(visualizacion)
generar_rio_emocional = visualizacion.generar_rio_emocional

import google.genai.types as types


# Crear un contexto mock simple para la prueba
class MockContext:
    async def save_artifact(self, filename, artifact):
        print(f"  ‚úì Artifact guardado: {filename}")
        print(f"  ‚úì Tipo: Objeto Part con datos binarios")
        return 1  # versi√≥n 1


async def test_direct_call():
    """Prueba directa de la herramienta de visualizaci√≥n"""
    print("\n" + "="*60)
    print("PRUEBA DIRECTA DE LA HERRAMIENTA DE VISUALIZACI√ìN")
    print("="*60 + "\n")

    # Emojis de prueba
    emojis_test = "üòä üåä üíö üåü"
    print(f"üìù Emojis de prueba: {emojis_test}\n")

    # Paso 1: Generar la imagen
    print("1Ô∏è‚É£  Generando imagen PNG...")
    try:
        imagen_bytes = generar_rio_emocional(emojis_test)
        print(f"  ‚úì Imagen generada exitosamente")
        print(f"  ‚úì Tama√±o: {len(imagen_bytes):,} bytes\n")
    except Exception as e:
        print(f"  ‚úó Error: {e}\n")
        return

    # Paso 2: Crear artifact
    print("2Ô∏è‚É£  Creando artifact...")
    try:
        artifact = types.Part.from_bytes(
            data=imagen_bytes,
            mime_type="image/png"
        )
        print(f"  ‚úì Artifact creado exitosamente\n")
    except Exception as e:
        print(f"  ‚úó Error: {e}\n")
        return

    # Paso 3: Simular guardado
    print("3Ô∏è‚É£  Simulando guardado de artifact...")
    mock_context = MockContext()
    version = await mock_context.save_artifact(
        filename="rio_emocional.png",
        artifact=artifact
    )

    # Mensaje final
    mensaje = f"‚ú® He creado tu visualizaci√≥n del r√≠o emocional (versi√≥n {version}). La imagen muestra el flujo po√©tico de tus emociones: {emojis_test}"

    print(f"\n4Ô∏è‚É£  Mensaje final que retornar√≠a la herramienta:")
    print(f"  {mensaje}\n")

    print("="*60)
    print("‚úÖ PRUEBA COMPLETADA EXITOSAMENTE")
    print("="*60)
    print("\nCONCLUSI√ìN:")
    print("La herramienta funciona correctamente cuando se llama directamente.")
    print("El problema est√° en que Gemini no est√° decidiendo usar la herramienta.")
    print("\nSOLUCI√ìN RECOMENDADA:")
    print("1. Considerar usar un modelo diferente (Claude, GPT-4, etc.)")
    print("2. O crear una interfaz directa donde el usuario active la herramienta")
    print("   con un bot√≥n espec√≠fico en lugar de confiar en function calling")
    print()


if __name__ == "__main__":
    asyncio.run(test_direct_call())
